// Code generated by https://github.com/expgo/ag DO NOT EDIT.
// Plugins:
//   - github.com/expgo/enum

package example

import (
	"errors"
	"fmt"
)

const (
	// BaudRate110 is a BaudRate of type 110.
	BaudRate110 BaudRate = 110 // 110 波特
	// BaudRate300 is a BaudRate of type 300.
	BaudRate300 BaudRate = 300 // 300 波特
	// BaudRate600 is a BaudRate of type 600.
	BaudRate600 BaudRate = 600 // 600 波特
	// BaudRate1200 is a BaudRate of type 1200.
	BaudRate1200 BaudRate = 1200 // 1200 波特
	// BaudRate2400 is a BaudRate of type 2400.
	BaudRate2400 BaudRate = 2400 // 2400 波特
	// BaudRate4800 is a BaudRate of type 4800.
	BaudRate4800 BaudRate = 4800 // 4800 波特
	// BaudRate9600 is a BaudRate of type 9600.
	BaudRate9600 BaudRate = 9600 // 9600 波特
	// BaudRate14400 is a BaudRate of type 14400.
	BaudRate14400 BaudRate = 14400 // 14400 波特
	// BaudRate19200 is a BaudRate of type 19200.
	BaudRate19200 BaudRate = 19200 // 19200 波特
	// BaudRate38400 is a BaudRate of type 38400.
	BaudRate38400 BaudRate = 38400 // 38400 波特
	// BaudRate56000 is a BaudRate of type 56000.
	BaudRate56000 BaudRate = 56000 // 56000 波特
	// BaudRate57600 is a BaudRate of type 57600.
	BaudRate57600 BaudRate = 57600 // 57600 波特
	// BaudRate76800 is a BaudRate of type 76800.
	BaudRate76800 BaudRate = 76800 // 76800 波特
	// BaudRate115200 is a BaudRate of type 115200.
	BaudRate115200 BaudRate = 115200 // 115200 波特
	// BaudRate187500 is a BaudRate of type 187500.
	BaudRate187500 BaudRate = 187500 // 187500 波特
)

var ErrInvalidBaudRate = errors.New("not a valid BaudRate")

var _BaudRateName = "1103006001200240048009600144001920038400560005760076800115200187500"

var _BaudRateMapName = map[BaudRate]string{
	BaudRate110:    _BaudRateName[0:3],
	BaudRate300:    _BaudRateName[3:6],
	BaudRate600:    _BaudRateName[6:9],
	BaudRate1200:   _BaudRateName[9:13],
	BaudRate2400:   _BaudRateName[13:17],
	BaudRate4800:   _BaudRateName[17:21],
	BaudRate9600:   _BaudRateName[21:25],
	BaudRate14400:  _BaudRateName[25:30],
	BaudRate19200:  _BaudRateName[30:35],
	BaudRate38400:  _BaudRateName[35:40],
	BaudRate56000:  _BaudRateName[40:45],
	BaudRate57600:  _BaudRateName[45:50],
	BaudRate76800:  _BaudRateName[50:55],
	BaudRate115200: _BaudRateName[55:61],
	BaudRate187500: _BaudRateName[61:67],
}

// Name is the attribute of BaudRate.
func (x BaudRate) Name() string {
	if v, ok := _BaudRateMapName[x]; ok {
		return v
	}
	return fmt.Sprintf("BaudRate(%d).Name", x)
}

// Val is the attribute of BaudRate.
func (x BaudRate) Val() int {
	return int(x)
}

// IsValid provides a quick way to determine if the typed value is
// part of the allowed enumerated values
func (x BaudRate) IsValid() bool {
	_, ok := _BaudRateMapName[x]
	return ok
}

// String implements the Stringer interface.
func (x BaudRate) String() string {
	return x.Name()
}

var _BaudRateNameMap = map[string]BaudRate{
	_BaudRateName[0:3]:   BaudRate110,
	_BaudRateName[3:6]:   BaudRate300,
	_BaudRateName[6:9]:   BaudRate600,
	_BaudRateName[9:13]:  BaudRate1200,
	_BaudRateName[13:17]: BaudRate2400,
	_BaudRateName[17:21]: BaudRate4800,
	_BaudRateName[21:25]: BaudRate9600,
	_BaudRateName[25:30]: BaudRate14400,
	_BaudRateName[30:35]: BaudRate19200,
	_BaudRateName[35:40]: BaudRate38400,
	_BaudRateName[40:45]: BaudRate56000,
	_BaudRateName[45:50]: BaudRate57600,
	_BaudRateName[50:55]: BaudRate76800,
	_BaudRateName[55:61]: BaudRate115200,
	_BaudRateName[61:67]: BaudRate187500,
}

// ParseBaudRate converts a string to a BaudRate.
func ParseBaudRate(value string) (BaudRate, error) {
	if x, ok := _BaudRateNameMap[value]; ok {
		return x, nil
	}
	return BaudRate(0), fmt.Errorf("%s is %w", value, ErrInvalidBaudRate)
}
