// Code generated by https://github.com/expgo/ag DO NOT EDIT.
// Plugins:
//   - github.com/expgo/enum

package example

import (
	"errors"
	"fmt"
)

const (
	// DataTypeAI is a DataType of type AI.
	DataTypeAI DataType = 10 // 表示模拟量
	// DataTypeDI is a DataType of type DI.
	DataTypeDI DataType = 13 // 表示数字量
)

var ErrInvalidDataType = errors.New("not a valid DataType")

var _DataTypeName = "AIDI"

var _DataTypeMapName = map[DataType]string{
	DataTypeAI: _DataTypeName[0:2],
	DataTypeDI: _DataTypeName[2:4],
}

// Name is the attribute of DataType.
func (x DataType) Name() string {
	if v, ok := _DataTypeMapName[x]; ok {
		return v
	}
	return fmt.Sprintf("DataType(%d).Name", x)
}

// Val is the attribute of DataType.
func (x DataType) Val() uint8 {
	return uint8(x)
}

// IsValid provides a quick way to determine if the typed value is
// part of the allowed enumerated values
func (x DataType) IsValid() bool {
	_, ok := _DataTypeMapName[x]
	return ok
}

// String implements the Stringer interface.
func (x DataType) String() string {
	return x.Name()
}

var _DataTypeNameMap = map[string]DataType{
	_DataTypeName[0:2]: DataTypeAI,
	_DataTypeName[2:4]: DataTypeDI,
}

// ParseDataType converts a string to a DataType.
func ParseDataType(value string) (DataType, error) {
	if x, ok := _DataTypeNameMap[value]; ok {
		return x, nil
	}
	return DataType(0), fmt.Errorf("%s is %w", value, ErrInvalidDataType)
}
