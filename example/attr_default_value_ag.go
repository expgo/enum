// Code generated by https://github.com/expgo/ag DO NOT EDIT.
// Plugins:
//   - github.com/expgo/enum

package example

import (
	"errors"
	"fmt"
)

const (
	// DeviceSm is a Device of type SM.
	DeviceSm Device = iota // 特殊继电器, bit, 10
	// DeviceSd is a Device of type SD.
	DeviceSd // 特殊寄存器, word, 10
)

var ErrInvalidDevice = errors.New("not a valid Device")

var _DeviceName = "SMSD"

var _DeviceMapName = map[Device]string{
	DeviceSm: _DeviceName[0:2],
	DeviceSd: _DeviceName[2:4],
}

// Name is the attribute of Device.
func (x Device) Name() string {
	if v, ok := _DeviceMapName[x]; ok {
		return v
	}
	return fmt.Sprintf("Device(%d).Name", x)
}

var _DeviceMapCode = map[Device]int{
	DeviceSm: 145,
	DeviceSd: 169,
}

// Code is the attribute of Device.
func (x Device) Code() int {
	if v, ok := _DeviceMapCode[x]; ok {
		return v
	}
	return 0
}

var _DeviceMapIsBit = map[Device]bool{
	DeviceSm: true,
	DeviceSd: false,
}

// IsBit is the attribute of Device.
func (x Device) IsBit() bool {
	if v, ok := _DeviceMapIsBit[x]; ok {
		return v
	}
	return false
}

var _DeviceMapStr = map[Device]string{
	DeviceSm: "123",
	DeviceSd: "456",
}

// Str is the attribute of Device.
func (x Device) Str() string {
	if v, ok := _DeviceMapStr[x]; ok {
		return v
	}
	return fmt.Sprintf("Device(%d).Str", x)
}

var _DeviceMapA = map[Device]int16{
	DeviceSm: 1,
	DeviceSd: 2,
}

// A is the attribute of Device.
func (x Device) A() int16 {
	if v, ok := _DeviceMapA[x]; ok {
		return v
	}
	return 0
}

// Val is the attribute of Device.
func (x Device) Val() int {
	return int(x)
}

// IsValid provides a quick way to determine if the typed value is
// part of the allowed enumerated values
func (x Device) IsValid() bool {
	_, ok := _DeviceMapName[x]
	return ok
}

// String implements the Stringer interface.
func (x Device) String() string {
	return x.Name()
}

var _DeviceNameMap = map[string]Device{
	_DeviceName[0:2]: DeviceSm,
	_DeviceName[2:4]: DeviceSd,
}

// ParseDevice converts a string to a Device.
func ParseDevice(value string) (Device, error) {
	if x, ok := _DeviceNameMap[value]; ok {
		return x, nil
	}
	return Device(0), fmt.Errorf("%s is %w", value, ErrInvalidDevice)
}
