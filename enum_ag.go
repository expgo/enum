// Code generated by https://github.com/expgo/ag DO NOT EDIT.
// Plugins:
//   - github.com/expgo/enum

package enum

import (
	"errors"
	"fmt"
)

const (
	// AnnotationEnum is an Annotation of type Enum.
	AnnotationEnum Annotation = "Enum"
	// AnnotationEnumConfig is an Annotation of type EnumConfig.
	AnnotationEnumConfig Annotation = "EnumConfig"
)

var ErrInvalidAnnotation = errors.New("not a valid Annotation")

var _AnnotationNameMap = map[string]Annotation{
	"Enum":       AnnotationEnum,
	"EnumConfig": AnnotationEnumConfig,
}

// Name is the attribute of Annotation.
func (x Annotation) Name() string {
	if v, ok := _AnnotationNameMap[string(x)]; ok {
		return string(v)
	}
	return fmt.Sprintf("Annotation(%s).Name", string(x))
}

// Val is the attribute of Annotation.
func (x Annotation) Val() string {
	return string(x)
}

// IsValid provides a quick way to determine if the typed value is
// part of the allowed enumerated values
func (x Annotation) IsValid() bool {
	_, ok := _AnnotationNameMap[string(x)]
	return ok
}

// String implements the Stringer interface.
func (x Annotation) String() string {
	return x.Name()
}

// ParseAnnotation converts a string to an Annotation.
func ParseAnnotation(value string) (Annotation, error) {
	if x, ok := _AnnotationNameMap[value]; ok {
		return x, nil
	}
	return "", fmt.Errorf("%s is %w", value, ErrInvalidAnnotation)
}
